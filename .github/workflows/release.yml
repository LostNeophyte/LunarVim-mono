name: Release
on:
  schedule:
    - cron: "5 5 * * *"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: nightly
  push:
    branches: ["release-[0-9].[0-9]**"]

# Build on the oldest supported images, so we have broader compatibility
jobs:
  linux:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:neovim-ppa/unstable
          sudo apt-get update
          sudo apt-get install -y cmake neovim
      - name: Build release
        id: build
        run: |
          cmake -B build
          cd build
          cpack
          printf 'version=%s\n' "$(cat version.txt)" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v3
        with:
          name: lvim-linux64
          path: |
            build/lvim-linux64.tar.gz
            build/lvim-linux64.deb
          retention-days: 1

  appimage:
    runs-on: ubuntu-20.04
    container:
      image: ubuntu:20.04
      options: --privileged # Privileged mode is needed to load fuse module.
    steps:
      - name: Prepare container
        run: |
          apt-get update
          apt-get install -y software-properties-common
          apt-get install -y git
          apt-get install -y fuse libfuse2 # For linuxdeploy.
          # Workaround for https://github.com/actions/checkout/issues/766.
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          add-apt-repository ppa:neovim-ppa/unstable
          apt-get update
          apt-get install -y cmake autoconf automake build-essential gettext libtool-bin pkg-config unzip neovim
      - name: Build release
        id: build
        run: |
          ./scripts/appimage.sh
      - uses: actions/upload-artifact@v3
        with:
          name: appimage
          path: |
            build/bin/lvim.AppImage
          retention-days: 1

  macOS:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install brew packages
        run: |
          brew update --quiet
          brew install cmake neovim
      - name: Build release
        id: build
        run: |
          cmake -B build
          cd build
          cpack
      - uses: actions/upload-artifact@v3
        with:
          name: lvim-macos
          path: build/lvim-macos.tar.gz
          retention-days: 1

  windows:
    runs-on: windows-2019
    name: windows (MSVC_64)
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install neovim
        run: |
          Invoke-WebRequest https://github.com/neovim/neovim/releases/download/stable/nvim-win64.zip -OutFile nvim-win64.zip
          Expand-Archive .\nvim-win64.zip -DestinationPath .
      - name: build package
        run: |
          $env:path += ";$(pwd)\\nvim-win64\\bin"
          cmake -B build
          cmake --build build --target package
      - uses: actions/upload-artifact@v3
        with:
          name: lvim-win64
          path: |
            build/lvim-win64.msi
            build/lvim-win64.zip
          retention-days: 1

  publish:
    needs: [linux, appimage, macOS, windows]
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/heads/}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'nightly'
        run: |
          (echo 'SUBJECT=Lvim development (prerelease) build';
           echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
          gh release delete nightly --yes || true
          git push origin :nightly || true
      - if: env.TAG_NAME != 'nightly'
        run: |
          (echo 'SUBJECT=Lvim release build';
           echo 'PRERELEASE=') >> $GITHUB_ENV
          gh release delete stable --yes || true
          git push origin :stable || true
      # `sha256sum` outputs <sha> <path>, so we cd into each dir to drop the
      # containing folder from the output.
      - name: Generate Linux64 SHA256 checksums
        run: |
          cd ./lvim-linux64
          sha256sum lvim-linux64.tar.gz > lvim-linux64.tar.gz.sha256sum
          echo "SHA_LINUX_64_TAR=$(cat lvim-linux64.tar.gz.sha256sum)" >> $GITHUB_ENV
          sha256sum lvim-linux64.deb > lvim-linux64.deb.sha256sum
          echo "SHA_LINUX_64_DEB=$(cat lvim-linux64.deb.sha256sum)" >> $GITHUB_ENV
      - name: Generate App Image SHA256 checksums
        run: |
          cd ./appimage
          sha256sum lvim.AppImage > lvim.AppImage.sha256sum
          echo "SHA_APP_IMAGE=$(cat lvim.AppImage.sha256sum)" >> $GITHUB_ENV
      - name: Generate macOS SHA256 checksums
        run: |
          cd ./lvim-macos
          sha256sum lvim-macos.tar.gz > lvim-macos.tar.gz.sha256sum
          echo "SHA_MACOS=$(cat lvim-macos.tar.gz.sha256sum)" >> $GITHUB_ENV
      - name: Generate Win64 SHA256 checksums
        run: |
          cd ./lvim-win64
          sha256sum lvim-win64.zip > lvim-win64.zip.sha256sum
          echo "SHA_WIN_64_ZIP=$(cat lvim-win64.zip.sha256sum)" >> $GITHUB_ENV
          sha256sum lvim-win64.msi > lvim-win64.msi.sha256sum
          echo "SHA_WIN_64_MSI=$(cat lvim-win64.msi.sha256sum)" >> $GITHUB_ENV
      - name: Publish release
        env:
          LVIM_VERSION: ${{ needs.linux.outputs.version }}
          DEBUG: api
        run: |
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/notes.md" > "$RUNNER_TEMP/notes.md"
          gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA lvim-macos/* lvim-linux64/* appimage/* lvim-win64/*
          if [ "$TAG_NAME" != "nightly" ]; then
            gh release create stable $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA lvim-macos/* lvim-linux64/* appimage/* lvim-win64/*
          fi
